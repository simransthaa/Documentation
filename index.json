{
  "api/ASE_Assignment.AppCanvas.CanvasException.html": {
    "href": "api/ASE_Assignment.AppCanvas.CanvasException.html",
    "title": "Class AppCanvas.CanvasException | mysite",
    "keywords": "Class AppCanvas.CanvasException Namespace ASE_Assignment Assembly ASE Assignment.dll Represents exceptions that occur during canvas operations. public class AppCanvas.CanvasException : Exception, ISerializable Inheritance object Exception AppCanvas.CanvasException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CanvasException(string) Initializes a new instance of the AppCanvas.CanvasException class with a specified error message. public CanvasException(string message) Parameters message string The error message. CanvasException(string, Exception) Initializes a new instance of the AppCanvas.CanvasException class with a specified error message and inner exception. public CanvasException(string message, Exception inner) Parameters message string The error message. inner Exception The inner exception."
  },
  "api/ASE_Assignment.AppCanvas.html": {
    "href": "api/ASE_Assignment.AppCanvas.html",
    "title": "Class AppCanvas | mysite",
    "keywords": "Class AppCanvas Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a canvas for drawing shapes, text, and performing graphical operations. public class AppCanvas : ICanvas Inheritance object AppCanvas Implements ICanvas Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppCanvas() Initializes a new instance of the AppCanvas class with default settings. public AppCanvas() Properties CurrentPenColour Gets the name of the current pen color. public string CurrentPenColour { get; } Property Value string CurrentPosition Gets the current position of the pen on the canvas. public Point CurrentPosition { get; } Property Value Point PenColour Gets or sets the color of the pen. public object PenColour { get; set; } Property Value object Exceptions AppCanvas.CanvasException Thrown when the provided value is not a valid Color object. Xpos Gets or sets the X-coordinate of the pen. public int Xpos { get; set; } Property Value int Ypos Gets or sets the Y-coordinate of the pen. public int Ypos { get; set; } Property Value int Methods Circle(int, bool) Draws a circle on the canvas. public void Circle(int radius, bool filled) Parameters radius int The radius of the circle. filled bool Indicates whether the circle should be filled. Exceptions AppCanvas.CanvasException Thrown when the radius is non-positive or an error occurs during drawing. Clear() Clears the canvas by filling it with a white background. public void Clear() Exceptions AppCanvas.CanvasException Thrown if an error occurs during the clearing process. DrawTo(int, int) Draws a line from the current position to the specified coordinates. public void DrawTo(int toX, int toY) Parameters toX int The X-coordinate of the end point. toY int The Y-coordinate of the end point. Exceptions AppCanvas.CanvasException Thrown if an error occurs during the drawing process. GetBitmap() Retrieves the current bitmap representation of the canvas. public object GetBitmap() Returns object A Bitmap object representing the canvas. Exceptions AppCanvas.CanvasException Thrown if an error occurs while retrieving the bitmap. GetCanvasSize() Gets the size of the canvas. public Size GetCanvasSize() Returns Size The size of the canvas as a Size object. HasTextAtCurrentPosition(string) Checks if the specified text exists at the current pen position. public bool HasTextAtCurrentPosition(string text) Parameters text string The text to check for. Returns bool true if the text exists at the current position; otherwise, false. MoveTo(int, int) Moves the pen to the specified coordinates without drawing. public void MoveTo(int x, int y) Parameters x int The X-coordinate to move to. y int The Y-coordinate to move to. Rect(int, int, bool) Draws a rectangle starting from the current position. public void Rect(int width, int height, bool filled) Parameters width int The width of the rectangle. height int The height of the rectangle. filled bool Indicates whether the rectangle should be filled. Exceptions AppCanvas.CanvasException Thrown if the dimensions are non-positive or an error occurs during drawing. Reset() Resets the pen position to the origin (0, 0). public void Reset() Set(int, int) Sets the canvas dimensions. public void Set(int xsize, int ysize) Parameters xsize int The width of the canvas. ysize int The height of the canvas. Exceptions AppCanvas.CanvasException Thrown if dimensions are non-positive or an error occurs while resizing. SetColour(int, int, int) Sets the color of the pen using RGB values. public void SetColour(int red, int green, int blue) Parameters red int The red component (0-255). green int The green component (0-255). blue int The blue component (0-255). Exceptions AppCanvas.CanvasException Thrown if the color values are invalid. Tri(int, int) Draws a triangle with the specified dimensions. public void Tri(int width, int height) Parameters width int The width of the triangle. height int The height of the triangle. Exceptions AppCanvas.CanvasException Thrown if dimensions are non-positive or an error occurs during drawing. WriteText(string) Writes the specified text at the current pen position. public void WriteText(string text) Parameters text string The text to write. Exceptions AppCanvas.CanvasException Thrown if an error occurs during text rendering. getBitmap() Retrieves the current bitmap representation of the canvas. public object getBitmap() Returns object A Bitmap object representing the canvas."
  },
  "api/ASE_Assignment.CanvasException.html": {
    "href": "api/ASE_Assignment.CanvasException.html",
    "title": "Class CanvasException | mysite",
    "keywords": "Class CanvasException Namespace ASE_Assignment Assembly ASE Assignment.dll Represents errors that occur during canvas operations. public class CanvasException : Exception, ISerializable Inheritance object Exception CanvasException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CanvasException(string) Initializes a new instance of the CanvasException class with a specified error message. public CanvasException(string message) Parameters message string The message that describes the error. CanvasException(string, Exception) Initializes a new instance of the CanvasException class with a specified error message and a reference to the inner exception that is the cause of this exception. public CanvasException(string message, Exception inner) Parameters message string The message that describes the error. inner Exception The exception that is the cause of the current exception, or a null reference if no inner exception is specified."
  },
  "api/ASE_Assignment.CircleCommand.html": {
    "href": "api/ASE_Assignment.CircleCommand.html",
    "title": "Class CircleCommand | mysite",
    "keywords": "Class CircleCommand Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a command to draw a circle on the given canvas. public class CircleCommand : ICommand Inheritance object CircleCommand Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CircleCommand(int, bool) Initializes a new instance of the CircleCommand class. public CircleCommand(int radius, bool filled = false) Parameters radius int The radius of the circle to be drawn. filled bool A boolean indicating whether the circle is filled (default is false). Methods Execute(ICanvas) Executes the command to draw a circle on the provided canvas. public void Execute(ICanvas canvas) Parameters canvas ICanvas The canvas where the circle will be drawn. Exceptions ArgumentNullException Thrown if the canvas is null."
  },
  "api/ASE_Assignment.ClearCommand.html": {
    "href": "api/ASE_Assignment.ClearCommand.html",
    "title": "Class ClearCommand | mysite",
    "keywords": "Class ClearCommand Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a command to clear the canvas. public class ClearCommand : ICommand Inheritance object ClearCommand Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Execute(ICanvas) Executes the command to clear the given canvas. public void Execute(ICanvas canvas) Parameters canvas ICanvas The canvas to be cleared."
  },
  "api/ASE_Assignment.CommandFactory.html": {
    "href": "api/ASE_Assignment.CommandFactory.html",
    "title": "Class CommandFactory | mysite",
    "keywords": "Class CommandFactory Namespace ASE_Assignment Assembly ASE Assignment.dll Factory class responsible for creating various command objects based on input. public class CommandFactory Inheritance object CommandFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateCommand(string, params object[]) Creates an ICommand object based on the given command name and parameters. public ICommand CreateCommand(string commandName, params object[] parameters) Parameters commandName string The name of the command to be created (case-insensitive). parameters object[] The parameters required by the command. Returns ICommand An instance of a command class that implements ICommand. Exceptions ArgumentException Thrown if the command requires specific parameters but they are invalid. InvalidOperationException Thrown if the command name is unrecognized. Exception Thrown if any other error occurs during command creation."
  },
  "api/ASE_Assignment.DrawToCommand.html": {
    "href": "api/ASE_Assignment.DrawToCommand.html",
    "title": "Class DrawToCommand | mysite",
    "keywords": "Class DrawToCommand Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a command to draw a line to a specified point on the canvas. public class DrawToCommand : ICommand Inheritance object DrawToCommand Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DrawToCommand(int, int) Initializes a new instance of the DrawToCommand class. public DrawToCommand(int x, int y) Parameters x int The x-coordinate of the point to draw to. y int The y-coordinate of the point to draw to. Methods Execute(ICanvas) Executes the command to draw a line to the specified coordinates on the canvas. public void Execute(ICanvas canvas) Parameters canvas ICanvas The canvas on which the line will be drawn."
  },
  "api/ASE_Assignment.Form1.html": {
    "href": "api/ASE_Assignment.Form1.html",
    "title": "Class Form1 | mysite",
    "keywords": "Class Form1 Namespace ASE_Assignment Assembly ASE Assignment.dll public class Form1 : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form Form1 Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(bool) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(bool) Form.Close() Form.CreateAccessibilityInstance() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(ref Message) Form.ProcessMnemonic(char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnGotFocus(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(int, int, ref Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(ref Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(char) Form.ProcessKeyPreview(ref Message) Form.ProcessTabKey(bool) Form.RemoveOwnedForm(Form) Form.Select(bool, bool) Form.ScaleMinMaxSize(float, float, bool) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(int, int, int, int, BoundsSpecified) Form.SetClientSizeCore(int, int) Form.SetDesktopBounds(int, int, int, int) Form.SetDesktopLocation(int, int) Form.Show(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(ref Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiChildrenMinimizedAnchorBottom Form.MdiParent Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnMove(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.RescaleConstantsForDpi(int, int) ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Action) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DoDragDrop(object, DragDropEffects, Bitmap, Point, bool) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(nint) Control.FromHandle(nint) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Action) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.Invoke<T>(Func<T>) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.LogicalToDeviceUnits(Size) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDataContextChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentDataContextChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(nint, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.DataContext Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsAncestorSiteInDesignMode Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DataContextChanged Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Container Component.DesignMode Component.Events Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Form1() Initializes a new instance of the Form1 class. public Form1() Methods Dispose(bool) Clean up any resources being used. protected override void Dispose(bool disposing) Parameters disposing bool true if managed resources should be disposed; otherwise, false."
  },
  "api/ASE_Assignment.ICommand.html": {
    "href": "api/ASE_Assignment.ICommand.html",
    "title": "Interface ICommand | mysite",
    "keywords": "Interface ICommand Namespace ASE_Assignment Assembly ASE Assignment.dll Defines a contract for command objects that can execute operations on a canvas. public interface ICommand Methods Execute(ICanvas) Executes the command on the provided canvas. void Execute(ICanvas canvas) Parameters canvas ICanvas The canvas on which the command will operate."
  },
  "api/ASE_Assignment.MoveToCommand.html": {
    "href": "api/ASE_Assignment.MoveToCommand.html",
    "title": "Class MoveToCommand | mysite",
    "keywords": "Class MoveToCommand Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a command to move the drawing cursor to a specified position on the canvas. public class MoveToCommand : ICommand Inheritance object MoveToCommand Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MoveToCommand(int, int) Initializes a new instance of the MoveToCommand class. public MoveToCommand(int x, int y) Parameters x int The x-coordinate to move the cursor to. y int The y-coordinate to move the cursor to. Methods Execute(ICanvas) Executes the command to move the drawing cursor to the specified coordinates on the canvas. public void Execute(ICanvas canvas) Parameters canvas ICanvas The canvas on which the cursor will be moved. Exceptions ArgumentNullException Thrown if the canvas is null."
  },
  "api/ASE_Assignment.Parser.html": {
    "href": "api/ASE_Assignment.Parser.html",
    "title": "Class Parser | mysite",
    "keywords": "Class Parser Namespace ASE_Assignment Assembly ASE Assignment.dll Parses and processes a program input, converting it into a series of executable commands. public class Parser Inheritance object Parser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Parser(CommandFactory, StoredProgram) Initializes a new instance of the Parser class. public Parser(CommandFactory factory, StoredProgram program) Parameters factory CommandFactory The factory used to create commands. program StoredProgram The stored program that will hold the commands. Methods ParseProgram(string) Parses the input program string and adds the corresponding commands to the program. public void ParseProgram(string input) Parameters input string The program input as a string, with each command on a new line. Exceptions Exception Thrown if an error occurs while processing a command."
  },
  "api/ASE_Assignment.PenColorCommand.html": {
    "href": "api/ASE_Assignment.PenColorCommand.html",
    "title": "Class PenColorCommand | mysite",
    "keywords": "Class PenColorCommand Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a command to set the pen color for drawing on the canvas. public class PenColorCommand : ICommand Inheritance object PenColorCommand Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PenColorCommand(int, int, int) Initializes a new instance of the PenColorCommand class. public PenColorCommand(int red, int green, int blue) Parameters red int The red component of the color (0 to 255). green int The green component of the color (0 to 255). blue int The blue component of the color (0 to 255). Exceptions ArgumentOutOfRangeException Thrown when any of the RGB values are out of range (0-255). Methods Execute(ICanvas) Executes the command to set the pen color on the provided canvas. public void Execute(ICanvas canvas) Parameters canvas ICanvas The canvas on which the pen color will be set. Exceptions CanvasException Thrown if the canvas is not of type AppCanvas."
  },
  "api/ASE_Assignment.RectCommand.html": {
    "href": "api/ASE_Assignment.RectCommand.html",
    "title": "Class RectCommand | mysite",
    "keywords": "Class RectCommand Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a command to draw a rectangle on the canvas. public class RectCommand : ICommand Inheritance object RectCommand Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RectCommand(int, int, bool) Initializes a new instance of the RectCommand class. public RectCommand(int width, int height, bool filled) Parameters width int The width of the rectangle. height int The height of the rectangle. filled bool Indicates whether the rectangle should be filled (true) or just outlined (false). Methods Execute(ICanvas) Executes the command to draw the rectangle on the provided canvas. public void Execute(ICanvas canvas) Parameters canvas ICanvas The canvas on which the rectangle will be drawn. Exceptions ArgumentNullException Thrown if the canvas is null."
  },
  "api/ASE_Assignment.ResetCommand.html": {
    "href": "api/ASE_Assignment.ResetCommand.html",
    "title": "Class ResetCommand | mysite",
    "keywords": "Class ResetCommand Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a command to reset the canvas to its initial state. public class ResetCommand : ICommand Inheritance object ResetCommand Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Execute(ICanvas) Executes the command to reset the canvas to its initial state. public void Execute(ICanvas canvas) Parameters canvas ICanvas The canvas to reset. Exceptions CanvasException Thrown if the canvas is not of type AppCanvas."
  },
  "api/ASE_Assignment.StoredProgram.html": {
    "href": "api/ASE_Assignment.StoredProgram.html",
    "title": "Class StoredProgram | mysite",
    "keywords": "Class StoredProgram Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a stored program that contains a sequence of commands to be executed on a canvas. public class StoredProgram Inheritance object StoredProgram Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StoredProgram(ICanvas) Initializes a new instance of the StoredProgram class. public StoredProgram(ICanvas canvas) Parameters canvas ICanvas The canvas on which the commands will be executed. Methods AddCommand(ICommand) Adds a command to the stored program. public void AddCommand(ICommand command) Parameters command ICommand The command to be added to the program. Run() Executes all the commands in the stored program on the canvas. public void Run()"
  },
  "api/ASE_Assignment.TriCommand.html": {
    "href": "api/ASE_Assignment.TriCommand.html",
    "title": "Class TriCommand | mysite",
    "keywords": "Class TriCommand Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a command to draw a triangle on the canvas. public class TriCommand : ICommand Inheritance object TriCommand Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TriCommand(int, int) Initializes a new instance of the TriCommand class. public TriCommand(int width, int height) Parameters width int The width of the triangle's base. height int The height of the triangle. Methods Execute(ICanvas) Executes the command to draw the triangle on the provided canvas. public void Execute(ICanvas canvas) Parameters canvas ICanvas The canvas on which the triangle will be drawn. Exceptions CanvasException Thrown if the canvas is not of type AppCanvas."
  },
  "api/ASE_Assignment.WriteToCommand.html": {
    "href": "api/ASE_Assignment.WriteToCommand.html",
    "title": "Class WriteToCommand | mysite",
    "keywords": "Class WriteToCommand Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a command to write text onto the canvas. public class WriteToCommand : ICommand Inheritance object WriteToCommand Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WriteToCommand(string) Initializes a new instance of the WriteToCommand class. public WriteToCommand(string text) Parameters text string The text to be written to the canvas. If the text is null or whitespace, \"Default Text\" will be used. Methods Execute(ICanvas) Executes the command to write the specified text onto the provided canvas. public void Execute(ICanvas canvas) Parameters canvas ICanvas The canvas on which the text will be written. Exceptions ArgumentNullException Thrown if the canvas is null."
  },
  "api/ASE_Assignment.html": {
    "href": "api/ASE_Assignment.html",
    "title": "Namespace ASE_Assignment | mysite",
    "keywords": "Namespace ASE_Assignment Classes AppCanvas Represents a canvas for drawing shapes, text, and performing graphical operations. AppCanvas.CanvasException Represents exceptions that occur during canvas operations. CanvasException Represents errors that occur during canvas operations. CircleCommand Represents a command to draw a circle on the given canvas. ClearCommand Represents a command to clear the canvas. CommandFactory Factory class responsible for creating various command objects based on input. DrawToCommand Represents a command to draw a line to a specified point on the canvas. Form1 MoveToCommand Represents a command to move the drawing cursor to a specified position on the canvas. Parser Parses and processes a program input, converting it into a series of executable commands. PenColorCommand Represents a command to set the pen color for drawing on the canvas. RectCommand Represents a command to draw a rectangle on the canvas. ResetCommand Represents a command to reset the canvas to its initial state. StoredProgram Represents a stored program that contains a sequence of commands to be executed on a canvas. TriCommand Represents a command to draw a triangle on the canvas. WriteToCommand Represents a command to write text onto the canvas. Interfaces ICommand Defines a contract for command objects that can execute operations on a canvas."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | mysite",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | mysite",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | mysite",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}